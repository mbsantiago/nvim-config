local themer = require("themer")
local colorscheme = {}

---@param hl_name string hig group name
---@param value string foreground/background
---@return string hex value
local color_from_hl = function(hl_name, value)
  local hl = vim.api.nvim_get_hl_by_name(hl_name, true)
  local color = string.format("0x%x", hl[value] or 0)
  return color
end

---Returns the hex of the term color
---@param number number
---@return string term color
local get_term_color = function(number)
  local col = vim.g["terminal_color_" .. number]

  if not col then
    return "0x000000"
  end

  return col:gsub("#", "0x")
end

local function get_current_theme()
  local theme = vim.g.colors_name
  return theme
end

local function load_theme(name)
  return require("themer.modules.core.api").get_cp(name)
end


--- Returns config
---@return table config
colorscheme.generate_alacritty_config = function()
  local name = get_current_theme()
  local theme = load_theme(name)
  local config = { "# Put this in your alacritty.yml", "# Generated by Themer" }

  -- Print name of the theme
  table.insert(config, name .. ": &" .. name)

  -- Primary
  table.insert(config, "  primary:")
  table.insert(
    config,
    "    background: \"" .. theme["bg"]["base"] .. "\""
  )
  table.insert(
    config,
    "    foreground: \"" .. theme["fg"] .. "\""
  )
  -- Cursor
  -- table.insert(config, "  cursor:")
  -- table.insert(
  --   config,
  --   "    background: \"" .. color_from_hl("Normal", "foreground") .. "\""
  -- )
  -- table.insert(
  --   config,
  --   "    foreground: \"" .. color_from_hl("Normal", "background") .. "\""
  -- )
  -- Normal
  table.insert(config, "  normal:")
  table.insert(config, "    black: \"" .. get_term_color(0).. "\"")
  table.insert(config, "    red: \"" .. get_term_color(1).. "\"")
  table.insert(config, "    green: \"" .. get_term_color(2).. "\"")
  table.insert(config, "    yellow: \"" .. get_term_color(3).. "\"")
  table.insert(config, "    blue: \"" .. get_term_color(4).. "\"")
  table.insert(config, "    magenta: \"" .. get_term_color(5).. "\"")
  table.insert(config, "    cyan: \"" .. get_term_color(6).. "\"")
  table.insert(config, "    white: \"" .. get_term_color(7).. "\"")
  -- Bright Colors
  table.insert(config, "  bright:")
  table.insert(config, "    black: \"" .. get_term_color(8).. "\"")
  table.insert(config, "    red: \"" .. get_term_color(9).. "\"")
  table.insert(config, "    green: \"" .. get_term_color(10).. "\"")
  table.insert(config, "    yellow: \"" .. get_term_color(11).. "\"")
  table.insert(config, "    blue: \"" .. get_term_color(12).. "\"")
  table.insert(config, "    magenta: \"" .. get_term_color(13).. "\"")
  table.insert(config, "    cyan: \"" .. get_term_color(14).. "\"")
  table.insert(config, "    white: \"" .. get_term_color(15).. "\"")
  return config
end

---Writes alacritty config to a buffer
colorscheme.export = function()
  local buf = vim.api.nvim_create_buf(true, true)
  vim.api.nvim_buf_set_name(buf, "alacritty")
  vim.api.nvim_buf_set_lines(
    buf,
    0,
    1,
    true,
    colorscheme.generate_alacritty_config()
  )
  vim.api.nvim_buf_set_option(buf, "modifiable", false)
  vim.api.nvim_buf_set_option(buf, "readonly", true)
  vim.api.nvim_buf_set_option(buf, "bufhidden", "wipe")
  vim.api.nvim_buf_set_option(buf, "filetype", "yaml")
  vim.api.nvim_exec("buffer " .. buf, false)
end

return colorscheme
